---
name: Supply Chain
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  workflow_call:
    inputs:
      run-code-scanning:
        default: true
        type: boolean
        required: false
      codeql-code-scanning-category:
        default: codeql-code-scanning
        type: string
        required: false
      codeql-code-scanning-config-file:
        default: null
        type: string
        required: false
      codeql-go-version:
        type: string
        required: false
      codeql-java-version:
        default: 17
        type: string
        required: false
      codeql-java-cache:
        default: null
        type: string
        required: false
      codeql-java-distribution:
        default: adopt
        type: string
        required: false
      code-scanning-timeout-minutes:
        default: 10
        type: number
        required: false
      trivy-code-scanning-category:
        default: trivy-code-scanning
        type: string
        required: false
    secrets: {}
jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    needs:
      - dependency-review
      - code-scanning
      - trivy
    steps:
      - run: "echo SUCCESS"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest

    if: github.event_name == 'pull_request'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Dependency Review
        uses: actions/dependency-review-action@v4

  code-scanning:
    name: CodeQL Scan
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.code-scanning-timeout-minutes }}
    if: ${{ inputs.run-code-scanning == true && github.event_name != 'pull_request' }}
    permissions:
      security-events: write
      actions: read
      contents: read
      packages: read
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - uses: fabasoad/setup-enry-action@main
      - name: Detected Languages
        id: detected-languages
        run: echo "languages=$(enry | awk -F ' ' '{print $2}' | paste -sd ',' -)" >> $GITHUB_OUTPUT
      - uses: actions/github-script@v7
        name: Get CodeQL supported languages
        id: languages
        with:
          result-encoding: json
          script: |
            const enryCodeQLMapping = {
              'c#': 'csharp',
            };
            function getCodeQLLanguage(enryLang) {
              if (enryLang in enryCodeQLMapping) {
                return enryCodeQLMapping[enryLang];
              }
              return enryLang;
            }
            const detectedLanguages = '${{ steps.detected-languages.outputs.languages }}'.toLowerCase().split(',').map(language => {
              return getCodeQLLanguage(language)
            });
            const codeqlLanguages = ['cpp', 'csharp', 'go', 'python', 'java', 'javascript', 'typescript'];
            const languages = detectedLanguages.filter(language => codeqlLanguages.includes(language));
            return languages.join(',');
      - name: "Determine Go version"
        run: |
          if [ -z "${{ inputs.codeql-go-version }}" ]; then
            echo "GO_VERSION=stable" >> $GITHUB_ENV
            echo "GO_CHECK_LATEST=true" >> $GITHUB_ENV
          else
            echo "GO_VERSION=${{ inputs.codeql-go-version }}" >> $GITHUB_ENV
            echo "GO_CHECK_LATEST=false" >> $GITHUB_ENV
          fi
      - name: Set Go version
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: ${{ env.GO_CHECK_LATEST }}
          cache: true
          cache-dependency-path: "**/go.sum"
      - name: Set Java version
        uses: actions/setup-java@v4
        with:
          distribution: ${{ inputs.codeql-java-distribution }}
          java-version: ${{ inputs.codeql-java-version }}
          cache: ${{ inputs.codeql-java-cache }}
      - name: Initialize CodeQL
        if: steps.languages.outputs.result != '""'
        uses: github/codeql-action/init@v3
        with:
          config-file: ${{ inputs.codeql-code-scanning-config-file }}
          languages: ${{ fromJSON(steps.languages.outputs.result) }}
      - name: Add coopnorge Nuget source
        if: contains(steps.languages.outputs.result, 'csharp')
        run: |
          dotnet nuget add source --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/coopnorge/index.json"
      - name: Autobuild
        if: steps.languages.outputs.result != '""'
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        if: steps.languages.outputs.result != '""'
        uses: github/codeql-action/analyze@v3
        with:
          category: ${{ inputs.codeql-code-scanning-category }}

  update-and-cache-trivy-db:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    env:
      TRIVY_DB_VERSION: 2
      TRIVY_JAVA_DB_VERSION: 1
    outputs:
      trivy-db-sha: ${{ steps.trivy-db.outputs.sha }}
      trivy-java-db-sha: ${{ steps.trivy-java-db.outputs.sha }}
    steps:
      - id: trivy-db
        name: Check trivy db sha
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          endpoint='/orgs/aquasecurity/packages/container/trivy-db/versions'
          headers='Accept: application/vnd.github+json'
          jqFilter='.[] | select(.metadata.container.tags[] | contains($TRIVY_DB_VERSION)) | .name | sub("sha256:";"")'
          sha=$(gh api -H "${headers}" "${endpoint}" | jq --arg TRIVY_DB_VERSION "$TRIVY_DB_VERSION" --raw-output "${jqFilter}")
          echo "Trivy DB sha256:${sha}"
          echo "sha=${sha}" >> $GITHUB_OUTPUT

      - id: trivy-java-db
        name: Check trivy java db sha
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          endpoint='/orgs/aquasecurity/packages/container/trivy-java-db/versions'
          headers='Accept: application/vnd.github+json'
          jqFilter='.[] | select(.metadata.container.tags[] | contains($TRIVY_JAVA_DB_VERSION)) | .name | sub("sha256:";"")'
          sha=$(gh api -H "${headers}" "${endpoint}" | jq --arg TRIVY_JAVA_DB_VERSION "$TRIVY_JAVA_DB_VERSION" --raw-output "${jqFilter}")
          echo "Trivy Java DB sha256:${sha}"
          echo "sha=${sha}" >> $GITHUB_OUTPUT

      - id: restore-db-cache
        name: Restore Cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/.cache/trivy
          key: custom-cache-trivy-${{ steps.trivy-db.outputs.sha }}-${{ steps.trivy-java-db.outputs.sha }}

      - name: Cache Hit Check
        run: |
          echo "Latest db version already in cache: ${{ steps.restore-db-cache.outputs.cache-hit }}. Skipping db download."

      - name: Setup oras
        if: steps.restore-db-cache.outputs.cache-hit != 'true'
        uses: oras-project/setup-oras@v1

      - id: download-db
        name: Download and extract the vulnerability DB
        if: steps.restore-db-cache.outputs.cache-hit != 'true'
        continue-on-error: true
        run: |
          mkdir -p $GITHUB_WORKSPACE/.cache/trivy/db
          # Try to download from public.ecr.aws first
          if oras pull public.ecr.aws/aquasecurity/trivy-db:$TRIVY_DB_VERSION; then
            echo "Downloaded trivy-db from public.ecr.aws"
          # If that fails, try ghcr.io
          elif oras pull ghcr.io/aquasecurity/trivy-db:$TRIVY_DB_VERSION; then
            echo "Downloaded trivy-db from ghcr.io"
          else
            echo "Failed to download trivy-db from both registries."
            exit 1  # Exit with failure if both downloads fail
          fi
          tar -xzf db.tar.gz -C $GITHUB_WORKSPACE/.cache/trivy/db
          rm db.tar.gz

      - id: download-java-db
        name: Download and extract the Java DB
        if: steps.restore-db-cache.outputs.cache-hit != 'true'
        continue-on-error: true
        run: |
          mkdir -p $GITHUB_WORKSPACE/.cache/trivy/java-db
          # Try to download from public.ecr.aws first
          if oras pull public.ecr.aws/aquasecurity/trivy-java-db:$TRIVY_JAVA_DB_VERSION; then
            echo "Downloaded trivy-java-db from public.ecr.aws"
          # If that fails, try ghcr.io
          elif oras pull ghcr.io/aquasecurity/trivy-java-db:$TRIVY_JAVA_DB_VERSION; then
            echo "Downloaded trivy-java-db from ghcr.io"
          else
            echo "Failed to download trivy-java-db from both registries."
            exit 1  # Exit with failure if both downloads fail
          fi
          tar -xzf javadb.tar.gz -C $GITHUB_WORKSPACE/.cache/trivy/java-db
          rm javadb.tar.gz

      - id: cache-dbs
        name: Cache DBs
        if: steps.download-db.outcome == 'success' && steps.download-java-db.outcome == 'success'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/.cache/trivy
          key: custom-cache-trivy-${{ steps.trivy-db.outputs.sha }}-${{ steps.trivy-java-db.outputs.sha }}

      - name: Checkout
        # this step is needed for gh cache list in the next step
        uses: actions/checkout@v4
        if: steps.cache-dbs.outcome == 'success'

      - name: Delete previous caches
        # since the full db size is ~700 mb, it could easily exceed the repo limit of 10GB,
        # so we delete older entries if newer entry is successfully cached
        if: steps.cache-dbs.outcome == 'success'
        env:
          GH_TOKEN: ${{ github.token }}
        continue-on-error: true
        run: |
          # get ids for all old custom-trivy-cache entries
          ids=$(gh cache list | grep 'custom-cache-trivy-' | grep -v 'custom-cache-trivy-${{ steps.trivy-db.outputs.sha }}-${{ steps.trivy-java-db.outputs.sha }}' | awk '{print $1}')
          IFS=',' read -ra ID_ARRAY <<< "$ids"
          for id in "${ID_ARRAY[@]}"; do
            echo "Deleting stale cache with id $id"
            gh cache delete "$id"
          done

  trivy:
    name: trivy Scan
    needs: update-and-cache-trivy-db
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - id: restore-db-cache
        name: Restore DB from cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/.cache/trivy
          key: custom-cache-trivy-${{ needs.update-and-cache-trivy-db.outputs.trivy-db-sha }}-${{ needs.update-and-cache-trivy-db.outputs.trivy-java-db-sha }}
          restore-keys: custom-cache-trivy-
      - id: set-db-is-restored
        run: |
          # if any cache is restored, skip updating
          echo "db-is-restored=$([[ -n '${{ steps.restore-db-cache.outputs.cache-matched-key }}' ]] && echo true || echo false)" >> $GITHUB_OUTPUT
      - name: trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          format: sarif
          scanners: vuln,secret
          vuln-type: os
          output: trivy-results.sarif
          # disable the default cache behavior
          cache: false
        env:
          TRIVY_SKIP_DB_UPDATE: ${{ steps.set-db-is-restored.outputs.db-is-restored }}
          TRIVY_SKIP_JAVA_DB_UPDATE: ${{ steps.set-db-is-restored.outputs.db-is-restored }}
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          category: ${{ inputs.trivy-code-scanning-category }}
          sarif_file: trivy-results.sarif
